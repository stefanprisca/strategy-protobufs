/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.tictactoe.InitTrxArgs', null, global);
goog.exportSymbol('proto.tictactoe.Mark', null, global);
goog.exportSymbol('proto.tictactoe.MoveTrxPayload', null, global);
goog.exportSymbol('proto.tictactoe.TrxArgs', null, global);
goog.exportSymbol('proto.tictactoe.TrxType', null, global);
goog.exportSymbol('proto.tictactoe.TttContract', null, global);
goog.exportSymbol('proto.tictactoe.TttContract.State', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.TttContract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tictactoe.TttContract.repeatedFields_, null);
};
goog.inherits(proto.tictactoe.TttContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tictactoe.TttContract.displayName = 'proto.tictactoe.TttContract';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tictactoe.TttContract.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tictactoe.TttContract.prototype.toObject = function(opt_includeInstance) {
  return proto.tictactoe.TttContract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tictactoe.TttContract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.TttContract.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionsList: jspb.Message.getRepeatedField(msg, 1),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    xPlayer: jspb.Message.getFieldWithDefault(msg, 3, ""),
    oPlayer: jspb.Message.getFieldWithDefault(msg, 4, ""),
    lastUpdated: (f = msg.getLastUpdated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.TttContract}
 */
proto.tictactoe.TttContract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tictactoe.TttContract;
  return proto.tictactoe.TttContract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.TttContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.TttContract}
 */
proto.tictactoe.TttContract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<!proto.tictactoe.Mark>} */ (reader.readPackedEnum());
      msg.setPositionsList(value);
      break;
    case 2:
      var value = /** @type {!proto.tictactoe.TttContract.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setXPlayer(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOPlayer(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.TttContract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tictactoe.TttContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.TttContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.TttContract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getXPlayer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOPlayer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLastUpdated();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.tictactoe.TttContract.State = {
  XTURN: 0,
  OTURN: 1,
  XWON: 2,
  OWON: 3,
  TIE: 4
};

/**
 * repeated Mark positions = 1;
 * @return {!Array<!proto.tictactoe.Mark>}
 */
proto.tictactoe.TttContract.prototype.getPositionsList = function() {
  return /** @type {!Array<!proto.tictactoe.Mark>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<!proto.tictactoe.Mark>} value */
proto.tictactoe.TttContract.prototype.setPositionsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.tictactoe.Mark} value
 * @param {number=} opt_index
 */
proto.tictactoe.TttContract.prototype.addPositions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.tictactoe.TttContract.prototype.clearPositionsList = function() {
  this.setPositionsList([]);
};


/**
 * optional State state = 2;
 * @return {!proto.tictactoe.TttContract.State}
 */
proto.tictactoe.TttContract.prototype.getState = function() {
  return /** @type {!proto.tictactoe.TttContract.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.tictactoe.TttContract.State} value */
proto.tictactoe.TttContract.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string x_player = 3;
 * @return {string}
 */
proto.tictactoe.TttContract.prototype.getXPlayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.tictactoe.TttContract.prototype.setXPlayer = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string o_player = 4;
 * @return {string}
 */
proto.tictactoe.TttContract.prototype.getOPlayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.tictactoe.TttContract.prototype.setOPlayer = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp last_updated = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.tictactoe.TttContract.prototype.getLastUpdated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.tictactoe.TttContract.prototype.setLastUpdated = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.tictactoe.TttContract.prototype.clearLastUpdated = function() {
  this.setLastUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tictactoe.TttContract.prototype.hasLastUpdated = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.InitTrxArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.InitTrxArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tictactoe.InitTrxArgs.displayName = 'proto.tictactoe.InitTrxArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tictactoe.InitTrxArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.tictactoe.InitTrxArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tictactoe.InitTrxArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.InitTrxArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    player1Mark: jspb.Message.getFieldWithDefault(msg, 1, 0),
    player2Mark: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.InitTrxArgs}
 */
proto.tictactoe.InitTrxArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tictactoe.InitTrxArgs;
  return proto.tictactoe.InitTrxArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.InitTrxArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.InitTrxArgs}
 */
proto.tictactoe.InitTrxArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tictactoe.Mark} */ (reader.readEnum());
      msg.setPlayer1Mark(value);
      break;
    case 2:
      var value = /** @type {!proto.tictactoe.Mark} */ (reader.readEnum());
      msg.setPlayer2Mark(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.InitTrxArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tictactoe.InitTrxArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.InitTrxArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.InitTrxArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer1Mark();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPlayer2Mark();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Mark player1_mark = 1;
 * @return {!proto.tictactoe.Mark}
 */
proto.tictactoe.InitTrxArgs.prototype.getPlayer1Mark = function() {
  return /** @type {!proto.tictactoe.Mark} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.tictactoe.Mark} value */
proto.tictactoe.InitTrxArgs.prototype.setPlayer1Mark = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Mark player2_mark = 2;
 * @return {!proto.tictactoe.Mark}
 */
proto.tictactoe.InitTrxArgs.prototype.getPlayer2Mark = function() {
  return /** @type {!proto.tictactoe.Mark} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.tictactoe.Mark} value */
proto.tictactoe.InitTrxArgs.prototype.setPlayer2Mark = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.TrxArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.TrxArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tictactoe.TrxArgs.displayName = 'proto.tictactoe.TrxArgs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tictactoe.TrxArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.tictactoe.TrxArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tictactoe.TrxArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.TrxArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    movepayload: (f = msg.getMovepayload()) && proto.tictactoe.MoveTrxPayload.toObject(includeInstance, f),
    lastUpdated: (f = msg.getLastUpdated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.TrxArgs}
 */
proto.tictactoe.TrxArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tictactoe.TrxArgs;
  return proto.tictactoe.TrxArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.TrxArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.TrxArgs}
 */
proto.tictactoe.TrxArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tictactoe.TrxType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.tictactoe.MoveTrxPayload;
      reader.readMessage(value,proto.tictactoe.MoveTrxPayload.deserializeBinaryFromReader);
      msg.setMovepayload(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.TrxArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tictactoe.TrxArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.TrxArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.TrxArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMovepayload();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tictactoe.MoveTrxPayload.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdated();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional TrxType type = 1;
 * @return {!proto.tictactoe.TrxType}
 */
proto.tictactoe.TrxArgs.prototype.getType = function() {
  return /** @type {!proto.tictactoe.TrxType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.tictactoe.TrxType} value */
proto.tictactoe.TrxArgs.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional MoveTrxPayload movePayload = 2;
 * @return {?proto.tictactoe.MoveTrxPayload}
 */
proto.tictactoe.TrxArgs.prototype.getMovepayload = function() {
  return /** @type{?proto.tictactoe.MoveTrxPayload} */ (
    jspb.Message.getWrapperField(this, proto.tictactoe.MoveTrxPayload, 2));
};


/** @param {?proto.tictactoe.MoveTrxPayload|undefined} value */
proto.tictactoe.TrxArgs.prototype.setMovepayload = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.tictactoe.TrxArgs.prototype.clearMovepayload = function() {
  this.setMovepayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tictactoe.TrxArgs.prototype.hasMovepayload = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp last_updated = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.tictactoe.TrxArgs.prototype.getLastUpdated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.tictactoe.TrxArgs.prototype.setLastUpdated = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.tictactoe.TrxArgs.prototype.clearLastUpdated = function() {
  this.setLastUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tictactoe.TrxArgs.prototype.hasLastUpdated = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tictactoe.MoveTrxPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tictactoe.MoveTrxPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tictactoe.MoveTrxPayload.displayName = 'proto.tictactoe.MoveTrxPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tictactoe.MoveTrxPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.tictactoe.MoveTrxPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tictactoe.MoveTrxPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.MoveTrxPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mark: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tictactoe.MoveTrxPayload}
 */
proto.tictactoe.MoveTrxPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tictactoe.MoveTrxPayload;
  return proto.tictactoe.MoveTrxPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tictactoe.MoveTrxPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tictactoe.MoveTrxPayload}
 */
proto.tictactoe.MoveTrxPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {!proto.tictactoe.Mark} */ (reader.readEnum());
      msg.setMark(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tictactoe.MoveTrxPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tictactoe.MoveTrxPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tictactoe.MoveTrxPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tictactoe.MoveTrxPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMark();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 position = 1;
 * @return {number}
 */
proto.tictactoe.MoveTrxPayload.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tictactoe.MoveTrxPayload.prototype.setPosition = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Mark mark = 2;
 * @return {!proto.tictactoe.Mark}
 */
proto.tictactoe.MoveTrxPayload.prototype.getMark = function() {
  return /** @type {!proto.tictactoe.Mark} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.tictactoe.Mark} value */
proto.tictactoe.MoveTrxPayload.prototype.setMark = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.tictactoe.Mark = {
  X: 0,
  O: 1,
  E: 2
};

/**
 * @enum {number}
 */
proto.tictactoe.TrxType = {
  MOVE: 0
};

goog.object.extend(exports, proto.tictactoe);
